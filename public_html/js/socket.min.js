SC={connected:!1,socket:io.connect(),callbacks:{},notifyCallbacks:{},cameFromLoginDialog:!1,prepare:function(){var e=SC.socket;e.on("response",function(e){var t=SC.callbacks[e.reqid];t?(t.callback.call(t.scope,e.data),delete SC.callbacks[e.reqid]):console.log("response without request, have to debug where that comes from")}),e.on("notification",function(e){if(SC.notifyCallbacks[e.id]){var t=SC.notifyCallbacks[e.id];t.callback.call(t.scope,e.data)}}),e.on("connect",function(){console.log("socket.io connected. Waiting for user...")}),e.on("user",function(e){console.log("socket.io user received "+e.user.username),prepareWorkbench(e.user)}),e.on("error",function(e){console.log("SOCKET ERROR: "+e)})},sendRequest:function(e,t){console.log(e);var i=calculateWorkflowID(),n={scope:this,callback:t};SC.callbacks[i]=n,SC.socket.emit("request",{id:i,command:e})},sendDataRequest:function(e,t,i){var n=calculateWorkflowID(),s={scope:this,callback:i};SC.callbacks[n]=s,SC.socket.emit("request",{id:n,command:e,data:t})},sendDataNotificationRequest:function(e,t,i,n){var s=calculateWorkflowID(),o={scope:this,callback:n};SC.callbacks[s]=o,SC.notifyCallbacks[i.id]={scope:this,callback:i.callback,id:i.id},console.log("sendDataNotificationRequest: "+s+": "+e),console.log(t),SC.socket.emit("request",{id:s,command:e,data:t,notification:!0})},getFilterDescriptions:function(e){SC.sendRequest("getFilterDescriptions",e)}};