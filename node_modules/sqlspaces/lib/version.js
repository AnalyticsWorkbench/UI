/**
 *
 * User: giemza
 * Date: 09.02.12
 * Time: 20:29
 */

var Class = require('./class');

/**
 * Creates a new Version
 * @param {Number} version The version
 * @param {Number} major The major
 * @param {Number} minor The minor
 * @param {Number} branch The branch of the version
 * @param {String} name The name of the version
 * @param {Number} group The group id
 * @param {Number} lockedByUser The id of the user who locked the version
 * @param {Boolean} shared
 * @class
 */
module.exports = Class(/** @lends Version */{
    'constructor': function(version, major, minor, branch, name, group, lockedByUser, shared) {
        this.version = version;
        this.major = major;
        this.minor  = minor;
        this.branch = branch;
        this.name = name;
        this.group = group;
        this.lockedByUser = lockedByUser;
        this.shared = shared;
    },

    'public': {
        /**
         * Returns the version
         * @returns {Number} The version
         * @public
         */
        getVersion: function() {
            return this.version;
        },

        /**
         * Returns the major
         * @returns {Number} The major
         * @public
         */
        getMajor: function() {
            return this.major;
        },

        /**
         * Returns the minor
         * @returns {Number} The minor
         * @public
         */
        getMinor: function() {
            return this.minor;
        },

        /**
         * Returns the branch
         * @returns {Number} The branch
         * @public
         */
        getBranch: function() {
            return this.branch;
        },

        /**
         * Returns the name
         * @returns {String} The name
         * @public
         */
        getName: function() {
            return this.name;
        },

        /**
         * Returns the group
         * @returns {Number} The group
         * @public
         */
        getGroup: function() {
            return this.group;
        },

        /**
         * Returns a JSON representation of the version
         * @returns {JSON} The JSON representation of the version
         * @public
         */
        toJSON: function() {
            return {
                'class': 'version',
                'version': this.version,
                'major': this.major,
                'minor': this.minor,
                'branch': this.branch,
                'name': this.name,
                'group': this.group,
                'lockedByUser': this.lockedByUser,
                'shared': this.shared
            }
        },

        /**
         * Sets the properties of the version with an JSON object
         * @param {Object} data
         * @public
         */
        fromJSON: function(data) {
            this.version = data.version || null;
            this.major = data.major || null;
            this.minor  = data.minor || null;
            this.branch = data.branch || null;
            this.name = data.name || null;
            this.group = data.group || null;
            this.lockedByUser = data.lockedByUser || null;
            this.shared = data.shared || null;
        }
    }

});