/**
 * SQLSpaces Tuple definition
 *
 * User: giemza
 * Date: 09.02.12
 * Time: 20:27
 */

/**
 * Importing class functions
 */
var Class = require('./class');

/**
 * Importing the field class
 */
var Field = require('./field');

/**
 * Creates a new Tuple
 * @param {Array} fields The fields of the tuple
 * @param {Number} id The id of the tuple
 * @param {Number} creationTimestamp The creation timestamp
 * @param {Number}Â lastModificationTimestamp The timestamp of the last modification
 * @param {Number} expiration The expiration of the tuple
 * @param {Number} major The major
 * @param {Number} version The version
 * @param {String} username The username
 * @class
 */
module.exports = Class(/** @lends Tuple */{
    'constructor': function(fields, id, creationTimestamp, lastModificationTimestamp, expiration, major, minor, version, username) {
        var tmpFields = fields || [];
        this.fields = [];

        for (var i = 0; i < tmpFields.length; i++) {
            var f = fields[i];
            if (f instanceof Field) {
                this.fields.push(f);
            } else {
                this.fields.push(this.createFieldFromValue(f));
            }
        }

        this.id = id;
        this.creationTimestamp = creationTimestamp;
        this.lastModificationTimestamp = lastModificationTimestamp;
        this.expiration = expiration;
        this.major = major;
        this.minor = minor;
        this.version = version;
        this.username = username;
    },

    'private': {
        /**
         * Wrapps a value according to its type into a field
         * @param f the value to wrapped into a field
         * @private
         */
        createFieldFromValue: function(f) {
            if (typeof f === 'number') {
                if (f % 1 === 0) {
                    if (f > 2147483647 || f < -2147483648) {
                        throw new Error('Integer value must be between -2147483648 and 2147483647. Your value "' + f + '" is outside the range of Java Integer. Instantiate a float field explicitly!');
                    }
                    return new Field('actual', 'integer', f);
                } else if (f % 1 !==0) {
                    return new Field('actual', 'double', f);
                }
            } else if (typeof f === 'string') {
                return new Field('actual', 'string', f);
            } else if (typeof f === 'boolean') {
                return new Field('actual', 'boolean', f);
            } else {
                throw new Error('Fields array contains a non mappable field value: ' + f);
            }
        }
    },

    'public': {

        /**
         * Adds a new Field to the tuple
         * @param {Field} field The field to be added
         * @public
         */
        addField: function(field) {
            if(field instanceof Field) {
                this.fields.push(field);
                return field;
            } else {
                var wrappedField = this.createFieldFromValue(field);
                this.fields.push(wrappedField);
                return wrappedField;
            }
        },

        /**
         * Returns all fields of the tuple
         * @return {Array} The array of Fields
         * @public
         */
        getFields: function() {
            return this.fields;
        },

        /**
         * Returns the field with a given index
         * @param {Number} idx Index of the field
         * @return {Field} The Field
         * @public
         */
        getField: function(idx) {
            return this.fields[idx];
        },

        /**
         * Returns the count of fields
         * @return {Number} The count of fields
         * @public
         */
        getFieldCount: function() {
            return this.fields.length;
        },

        /**
         * Returns the tuple id
         * @return {Number} The tuple id
         * @public
         */
        getTupleID: function() {
            return this.id;
        },

        /**
         * Returns the creationTimestamp
         * @return {Number} The creationTimestamp
         * @public
         */
        getCreationTimestamp: function() {
            return this.creationTimestamp;
        },

        /**
         * Returns the expiration
         * @return {Number} The expiration
         * @public
         */
        getExpiration: function() {
            return this.expiration;
        },

        /**
         * Returns the lastModificationTimestamp
         * @return {Number} The lastModificationTimestamp
         * @public
         */
        getLastModificationTimestamp: function() {
            return this.lastModificationTimestamp;
        },

        /**
         * Returns the tuple with formal fields
         * @returns {Tuple} The tuple template
         * @public
         */
        getTemplate: function() {
            var fields = [];
            for(var i = 0, il = this.fields.length; i < il; i++) {
                fields.push(
                    new Field('formal', this.fields[i].getType(), null)
                );
            }
            return new Tuple(fields);
        },

        getSignature: function() {
            var signature = '';
            for(var i = 0, il = this.fields.length; i < il; i++) {
                signature += this.fields[i].getType()
            }
            return signature;
        },

        /**
         * Sets the tuple id
         * @param {Number} id The tuple id
         * @public
         */
        setTupleID: function(id) {
            this.id = id;
        },

        /**
         * Sets the creationTimestamp
         * @param {Number} creationTimestamp The tuple creationTimestamp
         * @public
         */
        setCreationTimestamp: function(creationTimestamp) {
            this.creationTimestamp = creationTimestamp;
        },

        /**
         * Sets the expiration
         * @param {Number} expiration The tuple expiration
         * @public
         */
        setExpiration: function(expiration) {
            this.expiration = expiration;
        },

        /**
         * Sets the lastModificationTimestamp
         * @param {Number} lastModificationTimestamp The tuple lastModificationTimestamp
         * @public
         */
        setLastModificationTimestamp: function(lastModificationTimestamp) {
            this.lastModificationTimestamp = lastModificationTimestamp;
        },

        /**
         * Returns a JSON representation of the tuple
         * @returns {JSON} The JSON representation of the tuple
         * @public
         */
        toJSON: function() {
            var fields = [];

            for(var i = 0, il = this.fields.length; i < il; i++) {
                fields.push(
                    this.fields[i].toJSON()
                );
            }

            return {
                'class': 'tuple',
                'id': this.id,
                'creationTimestamp': this.creationTimestamp,
                'lastModificationTimestamp': this.lastModificationTimestamp,
                'expiration': this.expiration,
                'major': this.major,
                'minor': this.minor,
                'version': this.version,
                'space': this.space,
                'username': this.username,
                'fields': fields
            }
        },

        /**
         * Sets the properties of the tuple with an JSON object
         * @param {Object} data
         * @public
         */
        fromJSON: function(data) {
            this.id = data.id || null;
            this.creationTimestamp = data.creationTimestamp || null;
            this.lastModificationTimestamp = data.lastModificationTimestamp || null;
            this.expiration = data.expiration || null;
            this.major = data.major || null;
            this.minor = data.minor || null;
            this.version = data.version || null;
            this.username = data.username || null;

            if(data.fields && data.fields.length) {
                for(var i = 0, il = data.fields.length; i < il; i++) {
                    var field = new Field();
                    field.fromJSON(data.fields[i])
                    this.addField(field);
                }
            }
        }
    }
});