/**
 * A bundle of utility functions used in the TS environment
 *
 * User: wessel, giemza
 * Date: 09.02.12
 * Time: 20:05
 */

var debug = false;

/**
 * Returns a random uuid
 */
exports.getUniqueId = function() {
    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split(''),
        uuid = [],
        rnd = 0,
        r;
    for (var i = 0; i < 36; i++) {
        if (i == 8 || i == 13 ||  i == 18 || i == 23) {
            uuid[i] = '-';
        } else if (i == 14) {
            uuid[i] = '4';
        } else {
            if (rnd <= 0x02) rnd = 0x2000000 + (Math.random() * 0x1000000) | 0;
            r = rnd & 0xf;
            rnd = rnd >> 4;
            uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];
        }
    }
    return uuid.join('');
};

/**
 * Extends an object with another
 * @param {Object} obj Object to be extended
 * @param {Object} obj2 Object to extend with
 * @return {Object} The extended object
 */
exports.extend = function(obj, obj2) {
    for (var prop in obj2) {
        if (obj2[prop] !== void 0) obj[prop] = obj2[prop];
    }
    return obj;
};

/**
 * Fills a number with leading zeros
 * @param {Number} number Number to be filled
 * @param {Number} length The max length of the number
 * @return {String} The filled number as string
 */
var landingZero = exports.leadingZero = function (number, length) {
    var str = '' + number;
    while (str.length < length) str = '0' + str;
    return str;
};

/**
 * Formats a timestamp to the german date/time format (DD.MM.YYYY HH:SS:MM)
 * @param {Number} timestamp
 * @return {String} The formated date
 */
exports.formatTimestamp =  function(timestamp) {
    if(timestamp > 0) {
        var d = new Date(parseInt(timestamp)),
            day = leadingZero(d.getDate(), 2),
            month = leadingZero(d.getMonth() + 1, 2),
            year = d.getFullYear(),
            hours = leadingZero(d.getHours(), 2),
            minutes = leadingZero(d.getMinutes(), 2),
            seconds = leadingZero(d.getSeconds(), 2);
        return day + '.' + month + '.' + year + ' ' + hours + ':' + minutes + ':' + seconds;
    } else {
        return '-';
    }
};

/**
 * Log messages in the console
 * @param {String} msg Message to be logged
 */
exports.log = function(msg) {
    if(debug && console) {
        console.log(msg);
    }
};

exports.is = function(type, value) {
    if(type == 'string') {
        return typeof value == 'string';

    } else if(type == 'boolean') {
        return (value == 'true' || value == 'false');

    } else if(type == 'byte') {
        var val = parseInt(value);
        return !isNaN(val) && (val >= -128) && (val <= 127);

    } else if(type == 'short') {
        var val = parseInt(value);
        return !isNaN(val) && (val >= -32768) && (val <= 32767);

    } else if(type == 'integer') {
        var val = parseInt(value);
        return !isNaN(val) && (val >= -2147483648) && (val <= 2147483647);

    } else if(type == 'long') {
        var val = parseInt(value);
        return !isNaN(val) && (val >= -9223372036854775808) && (val <= 9223372036854775807);

    } else if(type == 'float' || type == 'double') {
        var val = parseFloat(value);
        return !isNaN(val);

    } else {
        return false;
    }
};


/**
 * Enables or disables the console logging
 * @param {Boolean} enabled
 */
exports.setDebugEnabled = function(enabled) {
    debug = enabled;
};