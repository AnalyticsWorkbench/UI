/**
 *
 * User: giemza
 * Date: 09.02.12
 * Time: 20:22
 */

var Class = require('./class');

/**
 * Creates a new Field
 * @class Fields are building units of Tuples. Each field has a type and can contain a value.
 * @param {String} fieldtype Actual/formal
 * @param {String} type The data type of the field
 * @param {String} value The value of the field
 * @param {Number} upperBound
 * @param {Number} lowerBound
 */
module.exports = Class(/** @lends Field */{
    'constructor': function(fieldtype, type, value, upperBound, lowerBound) {
        this.fieldtype = fieldtype;
        this.type = type;
        this.value = value;
        this.upperBound = upperBound;
        this.lowerBound = lowerBound;
    },

    'public': {
        /**
         * Get the field's value
         * @public
         */
        getValue: function() {
            return this.value;
        },

        /**
         * Set the field's value
         * @public
         */
        setValue: function(value) {
            this.value = value;
        },

			/**
         * Get the field's data type
         * @public
         */
        getType: function() {
            return this.type;
        },

        /**
         * Get the field's field type
         * @public
         */
	    	getFieldtype: function() {
            return this.fieldtype;
        },

        /**
         * Get the field's lowerbound
         * @public
         */
        getLowerbound: function() {
            return this.lowerBound;
        },

        /**
         * Set the field's lowerbound
         * @public
         */
        setLowerbound: function(lowerBound) {
            this.lowerBound = lowerBound;
        },

        /**
         * Get the field's upperbound
         * @public
         */
        getUpperbound: function() {
            return this.upperBound;
        },

        /**
         * Set the field's upperbound
         * @public
         */
        setUpperbound: function(upperBound) {
            this.upperBound = upperBound;
        },

	    	/**
         * Returns a JSON representation of the field
         * @returns {JSON} The JSON representation of the field
         * @public
         */
        toJSON: function() {
            return {
                'class': 'field',
                'fieldtype': this.fieldtype,
                'type': this.type,
                'textcontent': this.value,
                'upper-bound' : this.upperBound,
                'lower-bound' : this.lowerBound
            }
        },

        /**
         * Sets the properties of the field with an JSON object
         * @param {Object} data
         * @public
         */
        fromJSON: function(data) {
            this.fieldtype = data.fieldtype || null;
            this.type = data.type || null;

                if(this.fieldtype === 'actual') {
                    if(this.type === 'integer') {
                        this.value = parseInt(data.textcontent);
                    } else if (this.type === 'float' || this.type === 'double') {
                        this.value = parseFloat(data.textcontent);
                    } else if (this.type === 'boolean') {
                        this.value = data.textcontent.toLowerCase() === 'true';
                    } else {
                        this.value = data.textcontent;
                    }
                }
            this.upperBound = data.upperBound || null;
            this.lowerBound = data.lowerBound || null;
        }
    }
});