/**
 *
 * User: giemza
 * Date: 09.02.12
 * Time: 21:28
 */

var Class = require('./class');

var Connector = require('./socketconnector');

module.exports = Class(/* RemoteAdmin */{

    'constructor': function(options) {
        var self = this;
        options = options || {};

        this.locked = false;
        this.waitingCallback;

        this.clients = [];

        // Setup connector, if no connector object was passed create a Connector
        this.connector = options.connector || new Connector({
            host: options.host || null,
            port: options.port || null,
            endpoint: options.endpoint || null,
            json: false,
            through: true,
            onCallback: function(data) {
                self.onMessage(data);
				},
            onError: function(msg) {
                if(typeof options.onError == 'function') options.onError.call(this, msg);
            }
        });

        this.onCallback = options.onCallback || function() {}

        this.modes = {
            1: 'INVESTIGATOR',
            2: 'VIZARD'
        }

        this.notifications = {
            'ADD_CLIENT': function(data) {
                self.addClient(data);
                self.unlock();
                self.onCallback.call(this, {
                    client: data,
                    action: 'ADD_CLIENT'
                });
            },
            'REMOVE_CLIENT': function(data) {
                self.removeClient(data);
                self.unlock();
                self.onCallback.call(this, {
                    client: data,
                    action: 'REMOVE_CLIENT'
                });
            },
            'ACTION_OCCURED': function(data) {
                var self = this, responses = [], tuple;

                // Add the first response to the array.
                responses.push(data);

                // Set callback for further responses
                self.waitingCallback = addResponse = function(response) {
                    if(response == 'EOL') {
                        tuple = new Tuple();
                        tuple.fromJSON(JSON.parse(responses[2]).tuple);
                        self.unlock();

                        self.onCallback.call(this, {
                            client: responses[0],
                            action: responses[1],
                            tuple: tuple
                        });
                    } else {
                        responses.push(response);
                    }
                }
            },
				'INITIAL_STATE': function(data) {
					var self = this, clients, tuple, tuples = [];

					// First response is the list of clients
					clients = data.split(';');

					self.waitingCallback = function(response) {
						if(response == 'EOL') {
                self.unlock();
							self.onCallback.call(this, {
								clients: clients,
								tuples: tuples,
								action: 'INITIAL_STATE'
							})
						} else {
							tuple = new Tuple();
							tuple.fromJSON(JSON.parse(response).tuple);
							tuples.push(tuple);
            }

        }

				}
			}

        // Set INVESTIGATOR mode by default
			this.setMode(
				options.mode || 1,
				options.spaceName || 1,
				options.version || 0,
				options.initialState || false
			);
    },

    'private' : {
        tryRemoteAdmin: function(callback) {
            var self = this, interval,iterations = 0;

            if(this.locked == false) {
                callback.call();
            } else {
                interval = setInterval(function() {
                    iterations++;
                    Utils.log('Wait for remote admin (' + iterations + ')');

                    if(self.locked == false) {
                        clearInterval(interval);
                        callback.call();
                    } else if (iterations == 10) {
                        clearInterval(interval);
                        Utils.log('Remote Admin wasn\'t able to react after 10 tries');
                    }

                }, 500);
            }
        },

        lock: function(callback) {
            Utils.log('LOCKED!');
            this.locked = true;
            this.waitingCallback = callback || function(){};
        },

        unlock: function() {
            Utils.log('UNLOCKED!');
            this.waitingCallback = function(){};
            this.locked = false;
        },

        send: function(message, callback) {
            var self = this;

            this.tryRemoteAdmin(function() {
                if(typeof callback !== 'undefined') {
                    self.lock(callback);
                }
                // If the message is not an array, convert it
                if(!(typeof message == 'object' && message.length)) message = [message];
                for(var i = 0, il = message.length; i < il; i++) self.connector.send(message[i]);
            });
        },

        onMessage: function(data) {
            var self = this, msg = data.data;
            Utils.log('Incomming Message \n' + msg);

            if(typeof this.notifications[msg] !== 'undefined') {
                self.lock(function(_data) {
                    self.notifications[msg].call(this, _data);
                });
            } else {
                this.waitingCallback(msg);
            }
        },

        addClient: function(client) {
            Utils.log('Added client ' + client);
            this.clients.push(client);
        },

        removeClient: function(client) {
				delete this.clients[client];
        },

        handleAction: function(data) {
            if(response == 'EOL') {
                self.unlock();
                callback.call(this, responses);
            } else {
                responses.push(response);
            }
        }
    },

    'public': {
			setMode: function(mode, spaceName, version, initialState) {
            var self = this;
            if(typeof this.modes[mode] !== 'undefined') {
					this.send(this.modes[mode] + ' JSON ' + initialState + ' ' + spaceName);
            } else {
                throw new Error('This mode is not available');
            }
        },

        getHealth: function(callback) {
            var self = this, responses = [];
            var addResponse = function(response) {
                if(response == 'EOL') {
                    self.unlock();
                    callback.call(this, responses);
                } else {
                    responses.push(response);
                }
            }

            this.send('GET_HEALTH', function(data) {
                addResponse(data);
            });
        },

        getDbProps: function(callback) {
            var self = this, responses = [];
            var addResponse = function(response) {
                responses.push(response);
                if(responses.length == 3) {
                    self.unlock();
                    callback.call(this, responses);
                }
            }

            this.send('GET_DB_PROPS', function(data) {
                addResponse(data);
            });
        },

        getConnections: function(callback) {
            var self = this, connections = [];
            this.send('GET_CONNS', function(data) {
                self.unlock();

                // Remove quotes and split string
                connections = data.replace(/\"/g,'').split('; ');
                callback.call(this, connections);
            });
        },

        getClients: function(callback) {
            var self = this;
            this.tryRemoteAdmin(function() {
                callback.call(this, self.clients);
            });
        },

        getTupleProps: function(spaceId, version, callback) {
            var self = this, responses = [];
            var addResponse = function(response) {
                var signature, tuple;

                if(response == 'EOL') {
                    self.unlock();
                    callback.call(this, responses);
                } else {
                    response = response.split(',');
                    signature = response[0].split('_');
                    tuple = new Tuple();

                    for(var i = 0, il = signature.length; i < il; i++) {
                        tuple.addField(
                            createFormalField(signature[i].toLowerCase())
                        );
                    }
                    responses.push({tuple: tuple, length: response[1]});
                }
            }

            this.send(['GET_TUPLE_PROPS', spaceId + ', ' + version], function(data) {
                addResponse(data);
            });
        },

        invokeGarbageManager: function(callback) {
            var self = this;
            this.send('INVOKE_GM', function(data) {
                self.unlock();
                callback.call();
            });
        },

        disconnect: function() {
            this.connector.disconnect();

        }
    }
});