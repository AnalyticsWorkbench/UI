/**
 *
 * User: giemza
 * Date: 09.02.12
 * Time: 20:33
 */

exports.Utils = require('./lib/utils');

exports.Space = require('./lib/space');

exports.Version = require('./lib/version');

var Field = exports.Field = require('./lib/field');

exports.Tuple = require('./lib/tuple');

exports.TupleSpace = require('./lib/tuplespace');

/**
 * Helper functions for handling fields
 */

/**
 * Creates a new formal TS.Field
 * @param {String} type Data type of the field
 * @returns {TS.Field} The new TS.Field
 */
var createFormalField = exports.createFormalField = function(type) {
    if(typeof type !== 'undefined')  {
        return new Field('formal', type);
    }
    return false;
}

/**
 * Creates a new actual TS.Field
 * @param {String} type The data type of the field
 * @param {String} value The value of the field
 * @returns {TS.Field} The new TS.Field
 */
exports.createActualField = function(type, value) {
    if(typeof type !== 'undefined')  {
        return new Field('actual', type, value);
    }
    return false;
}

/**
 * Creates a new wildcard Instance of TS.Field.
 * @returns {TS.Field} The new TS.Field
 */
exports.createWildcardField = function() {
    return new Field('wildcard');
}

/**
 * A singleton formal integer field.
 */
exports.fInteger = createFormalField('integer');

/**
 * A singleton formal string field.
 */
exports.fString = createFormalField('string');

/**
 * A singleton formal char field.
 */
exports.fChar = createFormalField('char');

/**
 * A singleton formal float field.
 */
exports.fFloat = createFormalField('float');