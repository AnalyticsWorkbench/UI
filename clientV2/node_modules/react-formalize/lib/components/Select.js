'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _connectSelect = require('../hoc/connectSelect');

var _connectSelect2 = _interopRequireDefault(_connectSelect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var defaultRenderOption = function defaultRenderOption(props) {
    return _react2.default.createElement('option', props);
};

var Select = (0, _react.createClass)({

    displayName: 'Select',

    propTypes: {
        name: _react.PropTypes.string.isRequired,
        options: _react.PropTypes.object,
        value: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number, _react.PropTypes.array]).isRequired,
        multiple: _react.PropTypes.bool,
        placeholder: _react.PropTypes.any,
        renderOption: _react.PropTypes.func,
        onChange: _react.PropTypes.func.isRequired,
        children: _react.PropTypes.node
    },

    getDefaultProps: function getDefaultProps() {
        return {
            renderOption: defaultRenderOption
        };
    },
    renderOptions: function renderOptions(options, multiple, placeholder) {
        var renderOption = this.props.renderOption;

        var children = [];

        if (!multiple && placeholder) {
            children.push(renderOption({
                key: 'placeholder',
                value: '',
                disabled: true,
                children: placeholder
            }));
        }

        for (var value in options) {
            if (!options.hasOwnProperty(value)) continue;
            var label = options[value];
            children.push(renderOption({
                key: value,
                value: value,
                children: label
            }));
        }
        return children;
    },
    render: function render() {
        var _props = this.props;
        var name = _props.name;
        var options = _props.options;
        var value = _props.value;
        var multiple = _props.multiple;
        var placeholder = _props.placeholder;
        var renderOption = _props.renderOption;
        var onChange = _props.onChange;
        var children = _props.children;

        var props = _objectWithoutProperties(_props, ['name', 'options', 'value', 'multiple', 'placeholder', 'renderOption', 'onChange', 'children']);

        var finalValue = value;
        if (placeholder && !value) {
            // Set empty string as default value.
            // This will show up the placeholder option, when no value is set.
            finalValue = '';
        }

        return _react2.default.createElement(
            'select',
            _extends({
                value: finalValue,
                multiple: multiple,
                onChange: onChange
            }, props),
            options ? this.renderOptions(options, multiple, placeholder) : children
        );
    }
});

exports.default = (0, _connectSelect2.default)(Select);