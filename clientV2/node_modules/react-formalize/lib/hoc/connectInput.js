'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = connectInput;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _objectPath = require('object-path');

var _formShape = require('../utils/formShape');

var _formShape2 = _interopRequireDefault(_formShape);

var _connect = require('./connect');

var _connect2 = _interopRequireDefault(_connect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function defaultSerialize(event) {
    var target = event.target;
    var value = target.value;

    return value;
}

function defaultMapFormPropsToState(wrapperProps, formProps) {
    var values = formProps.values;
    var disabled = formProps.disabled;
    var name = wrapperProps.name;

    var value = (0, _objectPath.get)(values, name) || '';
    return { value: value, disabled: disabled };
}

function connectInput(Component) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var _options$serialize = options.serialize;
    var serialize = _options$serialize === undefined ? defaultSerialize : _options$serialize;
    var _options$mapFormProps = options.mapFormPropsToState;
    var mapFormPropsToState = _options$mapFormProps === undefined ? defaultMapFormPropsToState : _options$mapFormProps;

    var restOptions = _objectWithoutProperties(options, ['serialize', 'mapFormPropsToState']);

    var Wrapper = (0, _react.createClass)({

        displayName: 'ConnectedInput',

        propTypes: {
            name: _react.PropTypes.string.isRequired
        },

        contextTypes: {
            form: _formShape2.default
        },

        handleChange: function handleChange() {
            var name = this.props.name;
            var form = this.context.form;
            var handleChange = form.handleChange;

            var value = serialize.apply(undefined, arguments);
            handleChange(name, value);
        },
        render: function render() {
            return _react2.default.createElement(Component, _extends({}, this.props, {
                onChange: this.handleChange }));
        }
    });

    return (0, _connect2.default)(Wrapper, _extends({
        mapFormPropsToState: mapFormPropsToState
    }, restOptions));
}