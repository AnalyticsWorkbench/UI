'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = createFormProvider;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactAddonsUpdate = require('react-addons-update');

var _reactAddonsUpdate2 = _interopRequireDefault(_reactAddonsUpdate);

var _formShape = require('../utils/formShape');

var _formShape2 = _interopRequireDefault(_formShape);

var _makePath = require('../utils/makePath');

var _makePath2 = _interopRequireDefault(_makePath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function cleanProps(props) {
    var children = props.children;

    var rest = _objectWithoutProperties(props, ['children']);

    return rest;
}

function defaultUpdateValue(name, value, values) {
    var mutation = (0, _makePath2.default)(name + '.$set', value);
    return (0, _reactAddonsUpdate2.default)(values, mutation);
}

function createFormProvider(Component) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var _options$updateValue = options.updateValue;
    var updateValue = _options$updateValue === undefined ? defaultUpdateValue : _options$updateValue;

    return (0, _react.createClass)({

        displayName: 'FormProvider',

        propTypes: {
            values: _react.PropTypes.object.isRequired,
            messages: _react.PropTypes.object,
            disabled: _react.PropTypes.bool,
            onChange: _react.PropTypes.func.isRequired,
            onSubmit: _react.PropTypes.func
        },

        childContextTypes: {
            form: _formShape2.default
        },

        getDefaultProps: function getDefaultProps() {
            return {
                messages: {},
                disabled: false
            };
        },
        getChildContext: function getChildContext() {
            return {
                form: {
                    subscribe: this.subscribe,
                    handleChange: this.handleInputChange,
                    getFormProps: this.getFormProps
                }
            };
        },
        componentWillMount: function componentWillMount() {
            this.listeners = [];
        },
        componentWillUpdate: function componentWillUpdate(nextProps) {
            this.notify(nextProps);
        },
        componentWillUnmount: function componentWillUnmount() {
            this.listeners = [];
        },
        getFormProps: function getFormProps() {
            return cleanProps(this.props);
        },
        handleInputChange: function handleInputChange(name, value) {
            var _props = this.props;
            var values = _props.values;
            var onChange = _props.onChange;

            var nextValues = updateValue(name, value, values);
            if (onChange) onChange(nextValues);
        },
        subscribe: function subscribe(listener) {
            var _this = this;

            this.listeners.push(listener);
            return function () {
                var index = _this.listeners.indexOf(listener);
                _this.listeners.splice(index, 1);
            };
        },
        notify: function notify(props) {
            var cleanedProps = cleanProps(props);
            this.listeners.forEach(function (listener) {
                return listener(cleanedProps);
            });
        },
        handleSubmit: function handleSubmit(event) {
            var _props2 = this.props;
            var onSubmit = _props2.onSubmit;
            var values = _props2.values;

            if (onSubmit) {
                event.preventDefault();
                onSubmit(values);
            }
        },
        render: function render() {
            var _props3 = this.props;
            var values = _props3.values;
            var messages = _props3.messages;
            var disabled = _props3.disabled;
            var onChange = _props3.onChange;
            var onSubmit = _props3.onSubmit;

            var props = _objectWithoutProperties(_props3, ['values', 'messages', 'disabled', 'onChange', 'onSubmit']);

            return _react2.default.createElement(Component, _extends({}, props, {
                onSubmit: this.handleSubmit }));
        }
    });
}