'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = connect;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _formShape = require('../utils/formShape');

var _formShape2 = _interopRequireDefault(_formShape);

var _shallowEqual = require('../utils/shallowEqual');

var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultMapFormPropsToState(wrapperProps, formProps) {
    var disabled = formProps.disabled;

    return { disabled: disabled };
}

function defaultMapStateToProps(state) {
    return state;
}

function connect(Component) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var _options$mapFormProps = options.mapFormPropsToState;
    var mapFormPropsToState = _options$mapFormProps === undefined ? defaultMapFormPropsToState : _options$mapFormProps;
    var _options$mapStateToPr = options.mapStateToProps;
    var mapStateToProps = _options$mapStateToPr === undefined ? defaultMapStateToProps : _options$mapStateToPr;
    var _options$pure = options.pure;
    var pure = _options$pure === undefined ? true : _options$pure;


    return (0, _react.createClass)({

        displayName: 'Connected',

        propTypes: {
            name: _react.PropTypes.string
        },

        contextTypes: {
            form: _formShape2.default
        },

        getInitialState: function getInitialState() {
            return this.getStateFromForm();
        },
        componentWillMount: function componentWillMount() {
            // @TODO: Check for value property and warn if a value was given
            var form = this.context.form;
            var subscribe = form.subscribe;

            this.unsubscribe = subscribe(this.handleFormDataChange);
        },
        componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
            var prevName = this.props.name;
            var nextName = nextProps.name;

            if (!prevName || prevName === nextName) return;
            var nextState = this.getStateFromForm(nextProps);
            this.setState(nextState);
        },
        shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
            if (!pure) return true;
            return !(0, _shallowEqual2.default)(this.props, nextProps) || !(0, _shallowEqual2.default)(this.state, nextState);
        },
        componentWillUnmount: function componentWillUnmount() {
            this.unsubscribe();
        },
        getStateFromForm: function getStateFromForm() {
            var wrapperProps = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];
            var formProps = arguments.length <= 1 || arguments[1] === undefined ? this.context.form.getFormProps() : arguments[1];

            return mapFormPropsToState(wrapperProps, formProps);
        },
        setStateFromForm: function setStateFromForm(wrapperProps, formProps) {
            var nextState = this.getStateFromForm(wrapperProps, formProps);
            this.setState(nextState);
        },
        handleFormDataChange: function handleFormDataChange(formProps) {
            this.setStateFromForm(this.props, formProps);
        },
        render: function render() {
            var state = mapStateToProps(this.state, this.props);
            var props = this.props;
            return _react2.default.createElement(Component, _extends({}, props, state));
        }
    });
}